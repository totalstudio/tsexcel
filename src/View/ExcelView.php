<?php

namespace TotalStudio\TSExcel\View;

use Cake\Core\Exception\Exception;
use Cake\Event\EventManager;
use Cake\Http\Response;
use Cake\Http\ServerRequest;
use Cake\Utility\Text;
use Cake\Core\Configure;
use Cake\View\View;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

/**
 * @package  Cake.View
 */
class ExcelView extends View
{

    /**
     * PHPExcel instance
     *
     * @var Spreadsheet
     */
    public $Spreadsheet = null;

    /**
     * Filename
     *
     * @var string
     */
    private $__filename;

    /**
     * The subdirectory.  Excel views are always in xlsx.
     * 
     * @var string
     */
    public $subDir = 'xlsx';

    /**
     * pointer to the active sheet in the workbook
     *
     * @var integer
     */
    public $currentSheetIndex = null;

    /**
     * Constructor
     *
     * @param ServerRequest $request Request instance.
     * @param \Cake\Http\Response $response Response instance.
     * @param \Cake\Event\EventManager $eventManager Event manager instance.
     * @param array $viewOptions View options. See View::$_passedVars for list of
     *   options which get set as class properties.
     *
     * @throws \Cake\Core\Exception\Exception
     */
    public function __construct(
        ?ServerRequest $request = null,
        ?Response $response = null,
        ?EventManager $eventManager = null,
        array $viewOptions = []
    ) {
        parent::__construct($request, $response, $eventManager, $viewOptions);

        if (isset($viewOptions['templatePath']) && $viewOptions['templatePath'] == 'Error') {
            $this->layoutPath = null;
            $this->subDir = null;
            $response->withType('html');

            return;
        }

        // intitialize PHPExcel-Object
        $this->Spreadsheet = new Spreadsheet();

        $this->currentSheetIndex = 0;
    }

    /**
     * Initialization hook method.
     * Load the Helper
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->setLayout('default');
        $this->loadHelper('TotalStudio/TSExcel.Excel');
    }

    /**
     * [render description]
     *
     * @param string|null $template
     * @param null $layout
     * @return string [type]         [description]
     */
    public function render(?string $template = null, $layout = null): string
    {
        $content = parent::render($template, false);
        if ($this->response->getType() == 'text/html') {
            return $content;
        }

        $content = $this->__output();
        $this->Blocks->set('content', $content);

        $this->response = $this->response->withDownload($this->getFilename());

        return $this->Blocks->get('content');
    }

    /**
     * Generates the binary excel data
     *
     * @return string
     * @throws CakeException If the excel writer does not exist*@throws \PhpOffice\PhpSpreadsheet\Exception
     * @todo find a way to set date format for generated cells
     */
    private function __output()
    {

        //remove initially created empty Sheet

        $writer = new Xlsx($this->Spreadsheet);


        $this->currentSheetIndex = $this->Spreadsheet->getIndex($this->Spreadsheet->getSheetByName('Worksheet'));
        $this->Spreadsheet->removeSheetByIndex($this->currentSheetIndex);

        $this->Spreadsheet->getProperties()->setCreator(Configure::read('excel.creator'));
        $this->Spreadsheet->getProperties()->setDescription('generated by ' . Configure::read('excel.generator'));
        $this->Spreadsheet->getProperties()->setKeywords("office 2007 openxml php");

        ob_start();

        //$writer = IOFactory::createWriter($this->Spreadsheet, 'Excel2007');

        if (!isset($writer)) {
            throw new Exception('Excel writer not found');
        }

        $writer->setPreCalculateFormulas(false);
        $writer->setIncludeCharts(true);
        $writer->save('php://output');

        $output = ob_get_clean();

        return $output;
    }

    /**
     * Set the Name of Excel-File
     *
     * @param string $filename
     */
    public function setFilename($filename)
    {
        $this->__filename = $filename;
    }

    /**
     * get the Name of Excel-File
     *
     * @return string
     */
    public function getFilename()
    {
        if (!empty($this->__filename)) {
            return $this->__filename . '.xlsx';
        }
        return Text::slug(str_replace('.xlsx', '', $this->request->getRequestTarget())) . '.xlsx';
    }

    /**
     * @return Spreadsheet
     */
    public function getSpreadsheet(): Spreadsheet
    {
        return $this->Spreadsheet;
    }

}
